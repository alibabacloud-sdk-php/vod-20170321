<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Vod\V20170321\Models\GetTranscodeTemplateGroupResponseBody\transcodeTemplateGroup;

use AlibabaCloud\Tea\Model;

class transcodeTemplateList extends Model
{
    /**
     * @description The encryption configuration used for transcoding.
     *
     * @example {\"Codec\":\"AAC\",\"Remove\":\"false\",\"Bitrate\":\"44\",\"Samplerate\":\"32000\",\"Channels\":\"2\",\"Profile\":\"aac_low\"}
     *
     * @var string
     */
    public $audio;

    /**
     * @description The ID of the associated watermark.
     *
     * @example {\"TimeSpan\":{\"Seek\":\"1\",\"Duration\":\"5\"}
     *
     * @var string
     */
    public $clip;

    /**
     * @description The subtitle configurations. The value is a JSON-formatted string.
     *
     * @example "Format":"m3u8"
     *
     * @var string
     */
    public $container;

    /**
     * @description The transcoding configurations of the audio stream. The value is a JSON-formatted string.
     *
     * @example SD
     *
     * @var string
     */
    public $definition;

    /**
     * @description The conditional transcoding configurations. This parameter can be used if you want to determine the basic logic based on the bitrate and resolution of the mezzanine file before the video is transcoded. The value is a JSON-formatted string.
     *
     * @example "EncryptType":"Private"
     *
     * @var string
     */
    public $encryptSetting;

    /**
     * @description Queries the details of a transcoding template group based on the ID of the transcoding template group.
     *
     * @example "Segment": { "Duration":"6" }
     *
     * @var string
     */
    public $muxConfig;

    /**
     * @description The ID of the request.
     *
     * @example "PackageType":"HLSPackage","PackageConfig":{   "BandWidth":"900000"  }
     *
     * @var string
     */
    public $packageSetting;

    /**
     * @description The ID of the application.
     *
     * @example 90
     *
     * @var string
     */
    public $rotate;

    /**
     * @description The ID of the associated watermark.
     *
     * @example [{"SubtitleUrl":"http://outin-test.oss-cn-shanghai.aliyuncs.com/subtitles/c737fece-14f1-4364-b107-d5f7f8edde0e.ass","CharEncode":"utf-8"}]
     *
     * @var string
     */
    public $subtitleList;

    /**
     * @description Indicates whether the template group is locked. Valid values:
     *   **Disabled**: The template group is not locked.
     *   **Enabled**: The template group is locked.
     *
     * @example test
     *
     * @var string
     */
    public $templateName;

    /**
     * @description The type of the template. Valid values:
     *   **Normal**: a common transcoding template. This is the default value. The PackageSetting parameter cannot be set for this type of template.
     *   **VideoPackage**: a video stream package template. If this type of template is used, ApsaraVideo VOD transcodes a video into video streams in different bitrates and packages these video streams with a file. The PackageSetting parameter must be set for this type of template.
     *   **SubtitlePackage**: a subtitle package template. If this type of template is used, ApsaraVideo VOD adds the subtitle information to the output file generated by packaging the multi-bitrate video streams of the corresponding video. You must set the PackageSetting parameter for a subtitle package template and associate the subtitle package template with a video stream package template. A template group can contain only one subtitle package template.
     *
     * @example {"IsCheckReso":"true","IsCheckResoFail":"false","IsCheckVideoBitrate":"false","IsCheckVideoBitrateFail":"false","IsCheckAudioBitrate":"false","IsCheckAudioBitrateFail":"false"}
     *
     * @var string
     */
    public $transConfig;

    /**
     * @description The clipping configurations of the video. The value is a JSON-formatted string. For example, you can set this parameter if you want to extract 5 seconds of content from a video to generate a new video.
     *
     * @example {MediaId}/transcoce_1
     *
     * @var string
     */
    public $transcodeFileRegular;

    /**
     * @description The time when the template group was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
     *
     * @example 696d29a11erc057*****a3acc398d02f4
     *
     * @var string
     */
    public $transcodeTemplateId;

    /**
     * @description The ID of the transcoding template group.
     *
     * @example Normal
     *
     * @var string
     */
    public $type;

    /**
     * @description The time when the template group was modified. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
     *
     * @example {"Codec":"H.264","Bitrate":"900","Width":"960","Remove":"false","Fps":"30"}
     *
     * @var string
     */
    public $video;

    /**
     * @var string[]
     */
    public $watermarkIds;
    protected $_name = [
        'audio'                => 'Audio',
        'clip'                 => 'Clip',
        'container'            => 'Container',
        'definition'           => 'Definition',
        'encryptSetting'       => 'EncryptSetting',
        'muxConfig'            => 'MuxConfig',
        'packageSetting'       => 'PackageSetting',
        'rotate'               => 'Rotate',
        'subtitleList'         => 'SubtitleList',
        'templateName'         => 'TemplateName',
        'transConfig'          => 'TransConfig',
        'transcodeFileRegular' => 'TranscodeFileRegular',
        'transcodeTemplateId'  => 'TranscodeTemplateId',
        'type'                 => 'Type',
        'video'                => 'Video',
        'watermarkIds'         => 'WatermarkIds',
    ];

    public function validate()
    {
    }

    public function toMap()
    {
        $res = [];
        if (null !== $this->audio) {
            $res['Audio'] = $this->audio;
        }
        if (null !== $this->clip) {
            $res['Clip'] = $this->clip;
        }
        if (null !== $this->container) {
            $res['Container'] = $this->container;
        }
        if (null !== $this->definition) {
            $res['Definition'] = $this->definition;
        }
        if (null !== $this->encryptSetting) {
            $res['EncryptSetting'] = $this->encryptSetting;
        }
        if (null !== $this->muxConfig) {
            $res['MuxConfig'] = $this->muxConfig;
        }
        if (null !== $this->packageSetting) {
            $res['PackageSetting'] = $this->packageSetting;
        }
        if (null !== $this->rotate) {
            $res['Rotate'] = $this->rotate;
        }
        if (null !== $this->subtitleList) {
            $res['SubtitleList'] = $this->subtitleList;
        }
        if (null !== $this->templateName) {
            $res['TemplateName'] = $this->templateName;
        }
        if (null !== $this->transConfig) {
            $res['TransConfig'] = $this->transConfig;
        }
        if (null !== $this->transcodeFileRegular) {
            $res['TranscodeFileRegular'] = $this->transcodeFileRegular;
        }
        if (null !== $this->transcodeTemplateId) {
            $res['TranscodeTemplateId'] = $this->transcodeTemplateId;
        }
        if (null !== $this->type) {
            $res['Type'] = $this->type;
        }
        if (null !== $this->video) {
            $res['Video'] = $this->video;
        }
        if (null !== $this->watermarkIds) {
            $res['WatermarkIds'] = $this->watermarkIds;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return transcodeTemplateList
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['Audio'])) {
            $model->audio = $map['Audio'];
        }
        if (isset($map['Clip'])) {
            $model->clip = $map['Clip'];
        }
        if (isset($map['Container'])) {
            $model->container = $map['Container'];
        }
        if (isset($map['Definition'])) {
            $model->definition = $map['Definition'];
        }
        if (isset($map['EncryptSetting'])) {
            $model->encryptSetting = $map['EncryptSetting'];
        }
        if (isset($map['MuxConfig'])) {
            $model->muxConfig = $map['MuxConfig'];
        }
        if (isset($map['PackageSetting'])) {
            $model->packageSetting = $map['PackageSetting'];
        }
        if (isset($map['Rotate'])) {
            $model->rotate = $map['Rotate'];
        }
        if (isset($map['SubtitleList'])) {
            $model->subtitleList = $map['SubtitleList'];
        }
        if (isset($map['TemplateName'])) {
            $model->templateName = $map['TemplateName'];
        }
        if (isset($map['TransConfig'])) {
            $model->transConfig = $map['TransConfig'];
        }
        if (isset($map['TranscodeFileRegular'])) {
            $model->transcodeFileRegular = $map['TranscodeFileRegular'];
        }
        if (isset($map['TranscodeTemplateId'])) {
            $model->transcodeTemplateId = $map['TranscodeTemplateId'];
        }
        if (isset($map['Type'])) {
            $model->type = $map['Type'];
        }
        if (isset($map['Video'])) {
            $model->video = $map['Video'];
        }
        if (isset($map['WatermarkIds'])) {
            if (!empty($map['WatermarkIds'])) {
                $model->watermarkIds = $map['WatermarkIds'];
            }
        }

        return $model;
    }
}
